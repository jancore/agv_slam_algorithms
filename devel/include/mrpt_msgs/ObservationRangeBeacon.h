// Generated by gencpp from file mrpt_msgs/ObservationRangeBeacon.msg
// DO NOT EDIT!


#ifndef MRPT_MSGS_MESSAGE_OBSERVATIONRANGEBEACON_H
#define MRPT_MSGS_MESSAGE_OBSERVATIONRANGEBEACON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <mrpt_msgs/SingleRangeBeaconObservation.h>

namespace mrpt_msgs
{
template <class ContainerAllocator>
struct ObservationRangeBeacon_
{
  typedef ObservationRangeBeacon_<ContainerAllocator> Type;

  ObservationRangeBeacon_()
    : header()
    , sensor_pose_on_robot()
    , min_sensor_distance(0.0)
    , max_sensor_distance(0.0)
    , sensor_std_range(0.0)
    , sensed_data()  {
    }
  ObservationRangeBeacon_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sensor_pose_on_robot(_alloc)
    , min_sensor_distance(0.0)
    , max_sensor_distance(0.0)
    , sensor_std_range(0.0)
    , sensed_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _sensor_pose_on_robot_type;
  _sensor_pose_on_robot_type sensor_pose_on_robot;

   typedef double _min_sensor_distance_type;
  _min_sensor_distance_type min_sensor_distance;

   typedef double _max_sensor_distance_type;
  _max_sensor_distance_type max_sensor_distance;

   typedef double _sensor_std_range_type;
  _sensor_std_range_type sensor_std_range;

   typedef std::vector< ::mrpt_msgs::SingleRangeBeaconObservation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mrpt_msgs::SingleRangeBeaconObservation_<ContainerAllocator> >::other >  _sensed_data_type;
  _sensed_data_type sensed_data;





  typedef boost::shared_ptr< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> const> ConstPtr;

}; // struct ObservationRangeBeacon_

typedef ::mrpt_msgs::ObservationRangeBeacon_<std::allocator<void> > ObservationRangeBeacon;

typedef boost::shared_ptr< ::mrpt_msgs::ObservationRangeBeacon > ObservationRangeBeaconPtr;
typedef boost::shared_ptr< ::mrpt_msgs::ObservationRangeBeacon const> ObservationRangeBeaconConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mrpt_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mrpt_msgs': ['/home/smarlogy/catkin_ws/src/mrpt_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94cf8974a1eec8843e3b69c87cc25d62";
  }

  static const char* value(const ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94cf8974a1eec884ULL;
  static const uint64_t static_value2 = 0x3e3b69c87cc25d62ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrpt_msgs/ObservationRangeBeacon";
  }

  static const char* value(const ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message holds an observation of one or more landmarks \n\
#  detected by their range (distance) \n\
#  from some sensor on the robot.\n\
\n\
# Time of sensor data acquisition, coordinate frame ID.\n\
Header header\n\
\n\
# The sensor pose on the robot coordinates frame.\n\
geometry_msgs/Pose sensor_pose_on_robot\n\
\n\
# Sensor characteristics:\n\
float64 min_sensor_distance   # In meters (m)\n\
float64 max_sensor_distance   # (m)\n\
\n\
# Typical sensor noise:\n\
float64 sensor_std_range      # (m)\n\
\n\
# The vector of individual observations\n\
SingleRangeBeaconObservation[] sensed_data\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: mrpt_msgs/SingleRangeBeaconObservation\n\
#int32 INVALID_LANDMARK_ID = -1\n\
\n\
\n\
float64  range    # Distance, in meters.\n\
int32    id       # Landmark ID (or INVALID_LANDMARK_ID if landmarks are not identified)\n\
\n\
";
  }

  static const char* value(const ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sensor_pose_on_robot);
      stream.next(m.min_sensor_distance);
      stream.next(m.max_sensor_distance);
      stream.next(m.sensor_std_range);
      stream.next(m.sensed_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObservationRangeBeacon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrpt_msgs::ObservationRangeBeacon_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sensor_pose_on_robot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor_pose_on_robot);
    s << indent << "min_sensor_distance: ";
    Printer<double>::stream(s, indent + "  ", v.min_sensor_distance);
    s << indent << "max_sensor_distance: ";
    Printer<double>::stream(s, indent + "  ", v.max_sensor_distance);
    s << indent << "sensor_std_range: ";
    Printer<double>::stream(s, indent + "  ", v.sensor_std_range);
    s << indent << "sensed_data[]" << std::endl;
    for (size_t i = 0; i < v.sensed_data.size(); ++i)
    {
      s << indent << "  sensed_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mrpt_msgs::SingleRangeBeaconObservation_<ContainerAllocator> >::stream(s, indent + "    ", v.sensed_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRPT_MSGS_MESSAGE_OBSERVATIONRANGEBEACON_H
