// Generated by gencpp from file mrpt_msgs/GraphSlamAgent.msg
// DO NOT EDIT!


#ifndef MRPT_MSGS_MESSAGE_GRAPHSLAMAGENT_H
#define MRPT_MSGS_MESSAGE_GRAPHSLAMAGENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Time.h>
#include <std_msgs/String.h>

namespace mrpt_msgs
{
template <class ContainerAllocator>
struct GraphSlamAgent_
{
  typedef GraphSlamAgent_<ContainerAllocator> Type;

  GraphSlamAgent_()
    : name()
    , hostname()
    , ip_addr()
    , port(0)
    , is_online()
    , last_seen_time()
    , topic_namespace()
    , agent_ID(0)  {
    }
  GraphSlamAgent_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , hostname(_alloc)
    , ip_addr(_alloc)
    , port(0)
    , is_online(_alloc)
    , last_seen_time(_alloc)
    , topic_namespace(_alloc)
    , agent_ID(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _name_type;
  _name_type name;

   typedef  ::std_msgs::String_<ContainerAllocator>  _hostname_type;
  _hostname_type hostname;

   typedef  ::std_msgs::String_<ContainerAllocator>  _ip_addr_type;
  _ip_addr_type ip_addr;

   typedef uint16_t _port_type;
  _port_type port;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _is_online_type;
  _is_online_type is_online;

   typedef  ::std_msgs::Time_<ContainerAllocator>  _last_seen_time_type;
  _last_seen_time_type last_seen_time;

   typedef  ::std_msgs::String_<ContainerAllocator>  _topic_namespace_type;
  _topic_namespace_type topic_namespace;

   typedef int32_t _agent_ID_type;
  _agent_ID_type agent_ID;





  typedef boost::shared_ptr< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> const> ConstPtr;

}; // struct GraphSlamAgent_

typedef ::mrpt_msgs::GraphSlamAgent_<std::allocator<void> > GraphSlamAgent;

typedef boost::shared_ptr< ::mrpt_msgs::GraphSlamAgent > GraphSlamAgentPtr;
typedef boost::shared_ptr< ::mrpt_msgs::GraphSlamAgent const> GraphSlamAgentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mrpt_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mrpt_msgs': ['/home/smarlogy/catkin_ws/src/mrpt_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f5305e3be2b2f63220c0183a8af1288";
  }

  static const char* value(const ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f5305e3be2b2f63ULL;
  static const uint64_t static_value2 = 0x220c0183a8af1288ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrpt_msgs/GraphSlamAgent";
  }

  static const char* value(const ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Connection-related properties for a graphSLAM agent in a multi-robot\n\
# environment.\n\
#\n\
# Currently used in the mrpt_graphslam_2d ROS application.\n\
\n\
std_msgs/String name\n\
std_msgs/String hostname\n\
\n\
# IPv4 of the corresponding agent\n\
std_msgs/String ip_addr\n\
\n\
# Port that the the roscore of the corresponding agent is running under\n\
uint16 port\n\
\n\
# True if the SLAM Agent was last reported to be online\n\
std_msgs/Bool is_online\n\
\n\
# Timestamp that the SLAM Agent was last seen\n\
std_msgs/Time last_seen_time\n\
\n\
# ROS Topics namespace that the agent is running under\n\
# By definition this is going to be the same as the *name*\n\
# UPDATE: Previously the topics namespace was <name>_<agent_ID>. However since I'll be using the multimaster for communication, every node is going to have a different \n\
std_msgs/String topic_namespace\n\
\n\
# this is the last field of the IPv4 address of the corresponding agent\n\
# e.g. IP=192.168.100.17\n\
# agent_ID = 17\n\
int32 agent_ID \n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: std_msgs/Bool\n\
bool data\n\
================================================================================\n\
MSG: std_msgs/Time\n\
time data\n\
";
  }

  static const char* value(const ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.hostname);
      stream.next(m.ip_addr);
      stream.next(m.port);
      stream.next(m.is_online);
      stream.next(m.last_seen_time);
      stream.next(m.topic_namespace);
      stream.next(m.agent_ID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraphSlamAgent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.name);
    s << indent << "hostname: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.hostname);
    s << indent << "ip_addr: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.ip_addr);
    s << indent << "port: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.port);
    s << indent << "is_online: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.is_online);
    s << indent << "last_seen_time: ";
    s << std::endl;
    Printer< ::std_msgs::Time_<ContainerAllocator> >::stream(s, indent + "  ", v.last_seen_time);
    s << indent << "topic_namespace: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.topic_namespace);
    s << indent << "agent_ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.agent_ID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRPT_MSGS_MESSAGE_GRAPHSLAMAGENT_H
