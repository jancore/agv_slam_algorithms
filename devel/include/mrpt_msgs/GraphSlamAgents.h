// Generated by gencpp from file mrpt_msgs/GraphSlamAgents.msg
// DO NOT EDIT!


#ifndef MRPT_MSGS_MESSAGE_GRAPHSLAMAGENTS_H
#define MRPT_MSGS_MESSAGE_GRAPHSLAMAGENTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mrpt_msgs/GraphSlamAgent.h>

namespace mrpt_msgs
{
template <class ContainerAllocator>
struct GraphSlamAgents_
{
  typedef GraphSlamAgents_<ContainerAllocator> Type;

  GraphSlamAgents_()
    : list()  {
    }
  GraphSlamAgents_(const ContainerAllocator& _alloc)
    : list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> >::other >  _list_type;
  _list_type list;





  typedef boost::shared_ptr< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> const> ConstPtr;

}; // struct GraphSlamAgents_

typedef ::mrpt_msgs::GraphSlamAgents_<std::allocator<void> > GraphSlamAgents;

typedef boost::shared_ptr< ::mrpt_msgs::GraphSlamAgents > GraphSlamAgentsPtr;
typedef boost::shared_ptr< ::mrpt_msgs::GraphSlamAgents const> GraphSlamAgentsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mrpt_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mrpt_msgs': ['/home/smarlogy/catkin_ws/src/mrpt_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac3446e50a170e19b88734cb8e7206bb";
  }

  static const char* value(const ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac3446e50a170e19ULL;
  static const uint64_t static_value2 = 0xb88734cb8e7206bbULL;
};

template<class ContainerAllocator>
struct DataType< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrpt_msgs/GraphSlamAgents";
  }

  static const char* value(const ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Defines vector of GraphSlamAgents.\n\
# Currently used in the mrpt_graphslam_2d ROS application.\n\
\n\
GraphSlamAgent[] list\n\
\n\
\n\
================================================================================\n\
MSG: mrpt_msgs/GraphSlamAgent\n\
# Connection-related properties for a graphSLAM agent in a multi-robot\n\
# environment.\n\
#\n\
# Currently used in the mrpt_graphslam_2d ROS application.\n\
\n\
std_msgs/String name\n\
std_msgs/String hostname\n\
\n\
# IPv4 of the corresponding agent\n\
std_msgs/String ip_addr\n\
\n\
# Port that the the roscore of the corresponding agent is running under\n\
uint16 port\n\
\n\
# True if the SLAM Agent was last reported to be online\n\
std_msgs/Bool is_online\n\
\n\
# Timestamp that the SLAM Agent was last seen\n\
std_msgs/Time last_seen_time\n\
\n\
# ROS Topics namespace that the agent is running under\n\
# By definition this is going to be the same as the *name*\n\
# UPDATE: Previously the topics namespace was <name>_<agent_ID>. However since I'll be using the multimaster for communication, every node is going to have a different \n\
std_msgs/String topic_namespace\n\
\n\
# this is the last field of the IPv4 address of the corresponding agent\n\
# e.g. IP=192.168.100.17\n\
# agent_ID = 17\n\
int32 agent_ID \n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: std_msgs/Bool\n\
bool data\n\
================================================================================\n\
MSG: std_msgs/Time\n\
time data\n\
";
  }

  static const char* value(const ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraphSlamAgents_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrpt_msgs::GraphSlamAgents_<ContainerAllocator>& v)
  {
    s << indent << "list[]" << std::endl;
    for (size_t i = 0; i < v.list.size(); ++i)
    {
      s << indent << "  list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mrpt_msgs::GraphSlamAgent_<ContainerAllocator> >::stream(s, indent + "    ", v.list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRPT_MSGS_MESSAGE_GRAPHSLAMAGENTS_H
