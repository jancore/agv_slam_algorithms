// Generated by gencpp from file marker_msgs/Marker.msg
// DO NOT EDIT!


#ifndef MARKER_MSGS_MESSAGE_MARKER_H
#define MARKER_MSGS_MESSAGE_MARKER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace marker_msgs
{
template <class ContainerAllocator>
struct Marker_
{
  typedef Marker_<ContainerAllocator> Type;

  Marker_()
    : ids()
    , ids_confidence()
    , pose()  {
    }
  Marker_(const ContainerAllocator& _alloc)
    : ids(_alloc)
    , ids_confidence(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _ids_type;
  _ids_type ids;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ids_confidence_type;
  _ids_confidence_type ids_confidence;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::marker_msgs::Marker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marker_msgs::Marker_<ContainerAllocator> const> ConstPtr;

}; // struct Marker_

typedef ::marker_msgs::Marker_<std::allocator<void> > Marker;

typedef boost::shared_ptr< ::marker_msgs::Marker > MarkerPtr;
typedef boost::shared_ptr< ::marker_msgs::Marker const> MarkerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marker_msgs::Marker_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marker_msgs::Marker_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace marker_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'marker_msgs': ['/home/smarlogy/catkin_ws/src/marker_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::marker_msgs::Marker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marker_msgs::Marker_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_msgs::Marker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_msgs::Marker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_msgs::Marker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_msgs::Marker_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marker_msgs::Marker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30e386538c9eeff614c69452dbde6926";
  }

  static const char* value(const ::marker_msgs::Marker_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30e386538c9eeff6ULL;
  static const uint64_t static_value2 = 0x14c69452dbde6926ULL;
};

template<class ContainerAllocator>
struct DataType< ::marker_msgs::Marker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marker_msgs/Marker";
  }

  static const char* value(const ::marker_msgs::Marker_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marker_msgs::Marker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This expresses a marker/fiducial in a 3D space\n\
int32[] ids                  # possible ids of the detected fiducial (empty if no id could be identified)\n\
float64[] ids_confidence     # confidence of the possible ids in [0, 1]\n\
geometry_msgs/Pose pose      # pose of the detected marker/fiducial\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::marker_msgs::Marker_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marker_msgs::Marker_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ids);
      stream.next(m.ids_confidence);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Marker_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marker_msgs::Marker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marker_msgs::Marker_<ContainerAllocator>& v)
  {
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ids[i]);
    }
    s << indent << "ids_confidence[]" << std::endl;
    for (size_t i = 0; i < v.ids_confidence.size(); ++i)
    {
      s << indent << "  ids_confidence[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ids_confidence[i]);
    }
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARKER_MSGS_MESSAGE_MARKER_H
