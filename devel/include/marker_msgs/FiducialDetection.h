// Generated by gencpp from file marker_msgs/FiducialDetection.msg
// DO NOT EDIT!


#ifndef MARKER_MSGS_MESSAGE_FIDUCIALDETECTION_H
#define MARKER_MSGS_MESSAGE_FIDUCIALDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <marker_msgs/Fiducial.h>

namespace marker_msgs
{
template <class ContainerAllocator>
struct FiducialDetection_
{
  typedef FiducialDetection_<ContainerAllocator> Type;

  FiducialDetection_()
    : header()
    , camera_d()
    , camera_k()
    , type()
    , fiducial()  {
      camera_k.assign(0.0);
  }
  FiducialDetection_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , camera_d(_alloc)
    , camera_k()
    , type(_alloc)
    , fiducial(_alloc)  {
  (void)_alloc;
      camera_k.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _camera_d_type;
  _camera_d_type camera_d;

   typedef boost::array<double, 9>  _camera_k_type;
  _camera_k_type camera_k;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::vector< ::marker_msgs::Fiducial_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::marker_msgs::Fiducial_<ContainerAllocator> >::other >  _fiducial_type;
  _fiducial_type fiducial;





  typedef boost::shared_ptr< ::marker_msgs::FiducialDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marker_msgs::FiducialDetection_<ContainerAllocator> const> ConstPtr;

}; // struct FiducialDetection_

typedef ::marker_msgs::FiducialDetection_<std::allocator<void> > FiducialDetection;

typedef boost::shared_ptr< ::marker_msgs::FiducialDetection > FiducialDetectionPtr;
typedef boost::shared_ptr< ::marker_msgs::FiducialDetection const> FiducialDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marker_msgs::FiducialDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marker_msgs::FiducialDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace marker_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'marker_msgs': ['/home/smarlogy/catkin_ws/src/marker_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::marker_msgs::FiducialDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marker_msgs::FiducialDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_msgs::FiducialDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_msgs::FiducialDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_msgs::FiducialDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_msgs::FiducialDetection_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marker_msgs::FiducialDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ebb116fbde270de5551b0dc65e5f333";
  }

  static const char* value(const ::marker_msgs::FiducialDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ebb116fbde270deULL;
  static const uint64_t static_value2 = 0x5551b0dc65e5f333ULL;
};

template<class ContainerAllocator>
struct DataType< ::marker_msgs::FiducialDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marker_msgs/FiducialDetection";
  }

  static const char* value(const ::marker_msgs::FiducialDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marker_msgs::FiducialDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This expresses a marker/fiducial detection\n\
Header header                  # timestamp in the header is the acquisition time and frame\n\
\n\
# The distortion parameters, size depending on the distortion model.\n\
# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\n\
float64[] camera_d\n\
\n\
# Intrinsic camera matrix for the raw (distorted) images.\n\
#     [fx  0 cx]\n\
# K = [ 0 fy cy]\n\
#     [ 0  0  1]\n\
# Projects 3D points in the camera coordinate frame to 2D pixel\n\
# coordinates using the focal lengths (fx, fy) and principal point\n\
# (cx, cy).\n\
float64[9]  camera_k # 3x3 row-major matrix\n\
\n\
string   type                  # marker type used (bch, artag, mip_36h12, stage, ...)\n\
Fiducial[] fiducial            # detected markers\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: marker_msgs/Fiducial\n\
# This expresses a known detected fiducial in image space\n\
int32[] ids                         # possible ids of the detected fiducial (empty if no id could be identified)\n\
float64[] ids_confidence            # confidence of the possible ids in [0, 1]\n\
geometry_msgs/Point[] object_points # Array of object points in the object coordinate space.\n\
geometry_msgs/Point[] image_points  # Array of corresponding image points. Point.z is not used.\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::marker_msgs::FiducialDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marker_msgs::FiducialDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.camera_d);
      stream.next(m.camera_k);
      stream.next(m.type);
      stream.next(m.fiducial);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FiducialDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marker_msgs::FiducialDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marker_msgs::FiducialDetection_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "camera_d[]" << std::endl;
    for (size_t i = 0; i < v.camera_d.size(); ++i)
    {
      s << indent << "  camera_d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.camera_d[i]);
    }
    s << indent << "camera_k[]" << std::endl;
    for (size_t i = 0; i < v.camera_k.size(); ++i)
    {
      s << indent << "  camera_k[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.camera_k[i]);
    }
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "fiducial[]" << std::endl;
    for (size_t i = 0; i < v.fiducial.size(); ++i)
    {
      s << indent << "  fiducial[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::marker_msgs::Fiducial_<ContainerAllocator> >::stream(s, indent + "    ", v.fiducial[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARKER_MSGS_MESSAGE_FIDUCIALDETECTION_H
